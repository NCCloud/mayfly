// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cache

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"sigs.k8s.io/controller-runtime/pkg/cache"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockCache
func (_mock *MockCache) Get(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, key, obj, opts)
	} else {
		tmpRet = _mock.Called(ctx, key, obj)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.ObjectKey, client.Object, ...client.GetOption) error); ok {
		r0 = returnFunc(ctx, key, obj, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key client.ObjectKey
//   - obj client.Object
//   - opts ...client.GetOption
func (_e *MockCache_Expecter) Get(ctx interface{}, key interface{}, obj interface{}, opts ...interface{}) *MockCache_Get_Call {
	return &MockCache_Get_Call{Call: _e.mock.On("Get",
		append([]interface{}{ctx, key, obj}, opts...)...)}
}

func (_c *MockCache_Get_Call) Run(run func(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption)) *MockCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client.ObjectKey
		if args[1] != nil {
			arg1 = args[1].(client.ObjectKey)
		}
		var arg2 client.Object
		if args[2] != nil {
			arg2 = args[2].(client.Object)
		}
		var arg3 []client.GetOption
		var variadicArgs []client.GetOption
		if len(args) > 3 {
			variadicArgs = args[3].([]client.GetOption)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockCache_Get_Call) Return(err error) *MockCache_Get_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Get_Call) RunAndReturn(run func(ctx context.Context, key client.ObjectKey, obj client.Object, opts ...client.GetOption) error) *MockCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetInformer provides a mock function for the type MockCache
func (_mock *MockCache) GetInformer(ctx context.Context, obj client.Object, opts ...cache.InformerGetOption) (cache.Informer, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, obj, opts)
	} else {
		tmpRet = _mock.Called(ctx, obj)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetInformer")
	}

	var r0 cache.Informer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.Object, ...cache.InformerGetOption) (cache.Informer, error)); ok {
		return returnFunc(ctx, obj, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.Object, ...cache.InformerGetOption) cache.Informer); ok {
		r0 = returnFunc(ctx, obj, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Informer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, client.Object, ...cache.InformerGetOption) error); ok {
		r1 = returnFunc(ctx, obj, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetInformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInformer'
type MockCache_GetInformer_Call struct {
	*mock.Call
}

// GetInformer is a helper method to define mock.On call
//   - ctx context.Context
//   - obj client.Object
//   - opts ...cache.InformerGetOption
func (_e *MockCache_Expecter) GetInformer(ctx interface{}, obj interface{}, opts ...interface{}) *MockCache_GetInformer_Call {
	return &MockCache_GetInformer_Call{Call: _e.mock.On("GetInformer",
		append([]interface{}{ctx, obj}, opts...)...)}
}

func (_c *MockCache_GetInformer_Call) Run(run func(ctx context.Context, obj client.Object, opts ...cache.InformerGetOption)) *MockCache_GetInformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client.Object
		if args[1] != nil {
			arg1 = args[1].(client.Object)
		}
		var arg2 []cache.InformerGetOption
		var variadicArgs []cache.InformerGetOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cache.InformerGetOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCache_GetInformer_Call) Return(informer cache.Informer, err error) *MockCache_GetInformer_Call {
	_c.Call.Return(informer, err)
	return _c
}

func (_c *MockCache_GetInformer_Call) RunAndReturn(run func(ctx context.Context, obj client.Object, opts ...cache.InformerGetOption) (cache.Informer, error)) *MockCache_GetInformer_Call {
	_c.Call.Return(run)
	return _c
}

// GetInformerForKind provides a mock function for the type MockCache
func (_mock *MockCache) GetInformerForKind(ctx context.Context, gvk schema.GroupVersionKind, opts ...cache.InformerGetOption) (cache.Informer, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, gvk, opts)
	} else {
		tmpRet = _mock.Called(ctx, gvk)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetInformerForKind")
	}

	var r0 cache.Informer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, schema.GroupVersionKind, ...cache.InformerGetOption) (cache.Informer, error)); ok {
		return returnFunc(ctx, gvk, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, schema.GroupVersionKind, ...cache.InformerGetOption) cache.Informer); ok {
		r0 = returnFunc(ctx, gvk, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Informer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, schema.GroupVersionKind, ...cache.InformerGetOption) error); ok {
		r1 = returnFunc(ctx, gvk, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetInformerForKind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInformerForKind'
type MockCache_GetInformerForKind_Call struct {
	*mock.Call
}

// GetInformerForKind is a helper method to define mock.On call
//   - ctx context.Context
//   - gvk schema.GroupVersionKind
//   - opts ...cache.InformerGetOption
func (_e *MockCache_Expecter) GetInformerForKind(ctx interface{}, gvk interface{}, opts ...interface{}) *MockCache_GetInformerForKind_Call {
	return &MockCache_GetInformerForKind_Call{Call: _e.mock.On("GetInformerForKind",
		append([]interface{}{ctx, gvk}, opts...)...)}
}

func (_c *MockCache_GetInformerForKind_Call) Run(run func(ctx context.Context, gvk schema.GroupVersionKind, opts ...cache.InformerGetOption)) *MockCache_GetInformerForKind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 schema.GroupVersionKind
		if args[1] != nil {
			arg1 = args[1].(schema.GroupVersionKind)
		}
		var arg2 []cache.InformerGetOption
		var variadicArgs []cache.InformerGetOption
		if len(args) > 2 {
			variadicArgs = args[2].([]cache.InformerGetOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCache_GetInformerForKind_Call) Return(informer cache.Informer, err error) *MockCache_GetInformerForKind_Call {
	_c.Call.Return(informer, err)
	return _c
}

func (_c *MockCache_GetInformerForKind_Call) RunAndReturn(run func(ctx context.Context, gvk schema.GroupVersionKind, opts ...cache.InformerGetOption) (cache.Informer, error)) *MockCache_GetInformerForKind_Call {
	_c.Call.Return(run)
	return _c
}

// IndexField provides a mock function for the type MockCache
func (_mock *MockCache) IndexField(ctx context.Context, obj client.Object, field string, extractValue client.IndexerFunc) error {
	ret := _mock.Called(ctx, obj, field, extractValue)

	if len(ret) == 0 {
		panic("no return value specified for IndexField")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.Object, string, client.IndexerFunc) error); ok {
		r0 = returnFunc(ctx, obj, field, extractValue)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_IndexField_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IndexField'
type MockCache_IndexField_Call struct {
	*mock.Call
}

// IndexField is a helper method to define mock.On call
//   - ctx context.Context
//   - obj client.Object
//   - field string
//   - extractValue client.IndexerFunc
func (_e *MockCache_Expecter) IndexField(ctx interface{}, obj interface{}, field interface{}, extractValue interface{}) *MockCache_IndexField_Call {
	return &MockCache_IndexField_Call{Call: _e.mock.On("IndexField", ctx, obj, field, extractValue)}
}

func (_c *MockCache_IndexField_Call) Run(run func(ctx context.Context, obj client.Object, field string, extractValue client.IndexerFunc)) *MockCache_IndexField_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client.Object
		if args[1] != nil {
			arg1 = args[1].(client.Object)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 client.IndexerFunc
		if args[3] != nil {
			arg3 = args[3].(client.IndexerFunc)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCache_IndexField_Call) Return(err error) *MockCache_IndexField_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_IndexField_Call) RunAndReturn(run func(ctx context.Context, obj client.Object, field string, extractValue client.IndexerFunc) error) *MockCache_IndexField_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockCache
func (_mock *MockCache) List(ctx context.Context, list client.ObjectList, opts ...client.ListOption) error {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, list, opts)
	} else {
		tmpRet = _mock.Called(ctx, list)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.ObjectList, ...client.ListOption) error); ok {
		r0 = returnFunc(ctx, list, opts...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockCache_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - list client.ObjectList
//   - opts ...client.ListOption
func (_e *MockCache_Expecter) List(ctx interface{}, list interface{}, opts ...interface{}) *MockCache_List_Call {
	return &MockCache_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, list}, opts...)...)}
}

func (_c *MockCache_List_Call) Run(run func(ctx context.Context, list client.ObjectList, opts ...client.ListOption)) *MockCache_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client.ObjectList
		if args[1] != nil {
			arg1 = args[1].(client.ObjectList)
		}
		var arg2 []client.ListOption
		var variadicArgs []client.ListOption
		if len(args) > 2 {
			variadicArgs = args[2].([]client.ListOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockCache_List_Call) Return(err error) *MockCache_List_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_List_Call) RunAndReturn(run func(ctx context.Context, list client.ObjectList, opts ...client.ListOption) error) *MockCache_List_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveInformer provides a mock function for the type MockCache
func (_mock *MockCache) RemoveInformer(ctx context.Context, obj client.Object) error {
	ret := _mock.Called(ctx, obj)

	if len(ret) == 0 {
		panic("no return value specified for RemoveInformer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, client.Object) error); ok {
		r0 = returnFunc(ctx, obj)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_RemoveInformer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveInformer'
type MockCache_RemoveInformer_Call struct {
	*mock.Call
}

// RemoveInformer is a helper method to define mock.On call
//   - ctx context.Context
//   - obj client.Object
func (_e *MockCache_Expecter) RemoveInformer(ctx interface{}, obj interface{}) *MockCache_RemoveInformer_Call {
	return &MockCache_RemoveInformer_Call{Call: _e.mock.On("RemoveInformer", ctx, obj)}
}

func (_c *MockCache_RemoveInformer_Call) Run(run func(ctx context.Context, obj client.Object)) *MockCache_RemoveInformer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 client.Object
		if args[1] != nil {
			arg1 = args[1].(client.Object)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_RemoveInformer_Call) Return(err error) *MockCache_RemoveInformer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_RemoveInformer_Call) RunAndReturn(run func(ctx context.Context, obj client.Object) error) *MockCache_RemoveInformer_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type MockCache
func (_mock *MockCache) Start(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockCache_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) Start(ctx interface{}) *MockCache_Start_Call {
	return &MockCache_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockCache_Start_Call) Run(run func(ctx context.Context)) *MockCache_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_Start_Call) Return(err error) *MockCache_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Start_Call) RunAndReturn(run func(ctx context.Context) error) *MockCache_Start_Call {
	_c.Call.Return(run)
	return _c
}

// WaitForCacheSync provides a mock function for the type MockCache
func (_mock *MockCache) WaitForCacheSync(ctx context.Context) bool {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WaitForCacheSync")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockCache_WaitForCacheSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForCacheSync'
type MockCache_WaitForCacheSync_Call struct {
	*mock.Call
}

// WaitForCacheSync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) WaitForCacheSync(ctx interface{}) *MockCache_WaitForCacheSync_Call {
	return &MockCache_WaitForCacheSync_Call{Call: _e.mock.On("WaitForCacheSync", ctx)}
}

func (_c *MockCache_WaitForCacheSync_Call) Run(run func(ctx context.Context)) *MockCache_WaitForCacheSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_WaitForCacheSync_Call) Return(b bool) *MockCache_WaitForCacheSync_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockCache_WaitForCacheSync_Call) RunAndReturn(run func(ctx context.Context) bool) *MockCache_WaitForCacheSync_Call {
	_c.Call.Return(run)
	return _c
}
